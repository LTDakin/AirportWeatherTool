// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AirportWeather;
//
//    var weatherReport = WeatherReport.FromJson(jsonString);

namespace WeatherRep
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WeatherReport
    {
        [JsonProperty("report")]
        public Report Report { get; set; }
    }

    public partial class Report
    {
        [JsonProperty("conditions")]
        public Conditions Conditions { get; set; }

        [JsonProperty("forecast")]
        public ReportForecast Forecast { get; set; }

        [JsonProperty("windsAloft")]
        public ReportWindsAloft WindsAloft { get; set; }

        [JsonProperty("mos")]
        public Mos Mos { get; set; }
    }

    public partial class Conditions
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("ident")]
        public string Ident { get; set; }

        [JsonProperty("dateIssued")]
        public string DateIssued { get; set; }

        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }

        [JsonProperty("elevationFt")]
        public long ElevationFt { get; set; }

        [JsonProperty("tempC")]
        public long TempC { get; set; }

        [JsonProperty("dewpointC")]
        public long DewpointC { get; set; }

        [JsonProperty("pressureHg")]
        public double PressureHg { get; set; }

        [JsonProperty("pressureHpa")]
        public double PressureHpa { get; set; }

        [JsonProperty("reportedAsHpa")]
        public bool ReportedAsHpa { get; set; }

        [JsonProperty("densityAltitudeFt")]
        public long DensityAltitudeFt { get; set; }

        [JsonProperty("relativeHumidity")]
        public long RelativeHumidity { get; set; }

        [JsonProperty("flightRules")]
        public string FlightRules { get; set; }

        [JsonProperty("cloudLayers")]
        public CloudLayer[] CloudLayers { get; set; }

        [JsonProperty("cloudLayersV2")]
        public CloudLayer[] CloudLayersV2 { get; set; }

        [JsonProperty("weather")]
        public string[] Weather { get; set; }

        [JsonProperty("visibility")]
        public ConditionsVisibility Visibility { get; set; }

        [JsonProperty("wind")]
        public Wind Wind { get; set; }

        [JsonProperty("remarks")]
        public Remarks Remarks { get; set; }
    }

    public partial class CloudLayer
    {
        [JsonProperty("coverage")]
        public string Coverage { get; set; }

        [JsonProperty("altitudeFt")]
        public long AltitudeFt { get; set; }

        [JsonProperty("ceiling")]
        public bool Ceiling { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("altitudeQualifier", NullValueHandling = NullValueHandling.Ignore)]
        public long? AltitudeQualifier { get; set; }
    }

    public partial class Remarks
    {
        [JsonProperty("precipitationDiscriminator")]
        public bool PrecipitationDiscriminator { get; set; }

        [JsonProperty("humanObserver")]
        public bool HumanObserver { get; set; }

        [JsonProperty("seaLevelPressure")]
        public double SeaLevelPressure { get; set; }

        [JsonProperty("sixHourMaximumTemperature")]
        public double SixHourMaximumTemperature { get; set; }

        [JsonProperty("sixHourMinimumTemperature")]
        public double SixHourMinimumTemperature { get; set; }

        [JsonProperty("pressureTendancyRate")]
        public double PressureTendancyRate { get; set; }

        [JsonProperty("pressureTendancyCharacteristics")]
        public string PressureTendancyCharacteristics { get; set; }

        [JsonProperty("temperature")]
        public double Temperature { get; set; }

        [JsonProperty("dewpoint")]
        public double Dewpoint { get; set; }

        [JsonProperty("visibility")]
        public WeatherBeginEndsClass Visibility { get; set; }

        [JsonProperty("sensoryStatus")]
        public object[] SensoryStatus { get; set; }

        [JsonProperty("lightning")]
        public object[] Lightning { get; set; }

        [JsonProperty("weatherBeginEnds")]
        public WeatherBeginEndsClass WeatherBeginEnds { get; set; }

        [JsonProperty("clouds")]
        public Cloud[] Clouds { get; set; }

        [JsonProperty("obscuringLayers")]
        public object[] ObscuringLayers { get; set; }
    }

    public partial class Cloud
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("distance")]
        public string Distance { get; set; }
    }

    public partial class WeatherBeginEndsClass
    {
    }

    public partial class ConditionsVisibility
    {
        [JsonProperty("distanceSm")]
        public long DistanceSm { get; set; }

        [JsonProperty("prevailingVisSm")]
        public long PrevailingVisSm { get; set; }
    }

    public partial class Wind
    {
        [JsonProperty("speedKts")]
        public double SpeedKts { get; set; }

        [JsonProperty("direction")]
        public long Direction { get; set; }

        [JsonProperty("from")]
        public long From { get; set; }

        [JsonProperty("variable")]
        public bool Variable { get; set; }

        [JsonProperty("gustSpeedKts", NullValueHandling = NullValueHandling.Ignore)]
        public long? GustSpeedKts { get; set; }
    }

    public partial class ReportForecast
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("ident")]
        public string Ident { get; set; }

        [JsonProperty("dateIssued")]
        public string DateIssued { get; set; }

        [JsonProperty("period")]
        public Period Period { get; set; }

        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }

        [JsonProperty("elevationFt")]
        public long ElevationFt { get; set; }

        [JsonProperty("conditions")]
        public PurpleCondition[] Conditions { get; set; }
    }

    public partial class PurpleCondition
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("dateIssued")]
        public string DateIssued { get; set; }

        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }

        [JsonProperty("elevationFt")]
        public long ElevationFt { get; set; }

        [JsonProperty("relativeHumidity")]
        public long RelativeHumidity { get; set; }

        [JsonProperty("flightRules")]
        public string FlightRules { get; set; }

        [JsonProperty("cloudLayers")]
        public CloudLayer[] CloudLayers { get; set; }

        [JsonProperty("cloudLayersV2")]
        public CloudLayer[] CloudLayersV2 { get; set; }

        [JsonProperty("weather")]
        public string[] Weather { get; set; }

        [JsonProperty("visibility")]
        public PurpleVisibility Visibility { get; set; }

        [JsonProperty("wind")]
        public Wind Wind { get; set; }

        [JsonProperty("period")]
        public Period Period { get; set; }
    }

    public partial class Period
    {
        [JsonProperty("dateStart")]
        public string DateStart { get; set; }

        [JsonProperty("dateEnd")]
        public string DateEnd { get; set; }
    }

    public partial class PurpleVisibility
    {
        [JsonProperty("distanceSm")]
        public long DistanceSm { get; set; }

        [JsonProperty("distanceQualifier")]
        public long DistanceQualifier { get; set; }

        [JsonProperty("prevailingVisSm")]
        public long PrevailingVisSm { get; set; }

        [JsonProperty("prevailingVisDistanceQualifier")]
        public long PrevailingVisDistanceQualifier { get; set; }
    }

    public partial class Mos
    {
        [JsonProperty("station")]
        public string Station { get; set; }

        [JsonProperty("issued")]
        public string Issued { get; set; }

        [JsonProperty("period")]
        public Period Period { get; set; }

        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }

        [JsonProperty("forecast")]
        public MosForecast Forecast { get; set; }
    }

    public partial class MosForecast
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("ident")]
        public string Ident { get; set; }

        [JsonProperty("dateIssued")]
        public string DateIssued { get; set; }

        [JsonProperty("period")]
        public Period Period { get; set; }

        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }

        [JsonProperty("elevationFt")]
        public long ElevationFt { get; set; }

        [JsonProperty("conditions")]
        public FluffyCondition[] Conditions { get; set; }
    }

    public partial class FluffyCondition
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("tempMinC")]
        public double TempMinC { get; set; }

        [JsonProperty("tempMaxC")]
        public double TempMaxC { get; set; }

        [JsonProperty("dewpointMinC")]
        public double DewpointMinC { get; set; }

        [JsonProperty("dewpointMaxC")]
        public double DewpointMaxC { get; set; }

        [JsonProperty("flightRules")]
        public string FlightRules { get; set; }

        [JsonProperty("cloudLayers")]
        public CloudLayer[] CloudLayers { get; set; }

        [JsonProperty("cloudLayersV2")]
        public CloudLayer[] CloudLayersV2 { get; set; }

        [JsonProperty("weather")]
        public string[] Weather { get; set; }

        [JsonProperty("visibility")]
        public FluffyVisibility Visibility { get; set; }

        [JsonProperty("wind")]
        public Wind Wind { get; set; }

        [JsonProperty("period")]
        public Period Period { get; set; }

        [JsonProperty("turbulence")]
        public object[] Turbulence { get; set; }

        [JsonProperty("icing")]
        public object[] Icing { get; set; }
    }

    public partial class FluffyVisibility
    {
        [JsonProperty("distanceSm")]
        public long DistanceSm { get; set; }

        [JsonProperty("distanceQualifier")]
        public long DistanceQualifier { get; set; }
    }

    public partial class ReportWindsAloft
    {
        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }

        [JsonProperty("dateIssued")]
        public string DateIssued { get; set; }

        [JsonProperty("windsAloft")]
        public WindsAloftElement[] WindsAloft { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }
    }

    public partial class WindsAloftElement
    {
        [JsonProperty("validTime")]
        public string ValidTime { get; set; }

        [JsonProperty("period")]
        public Period Period { get; set; }

        [JsonProperty("windTemps")]
        public Dictionary<string, WindTemp> WindTemps { get; set; }
    }

    public partial class WindTemp
    {
        [JsonProperty("directionFromTrue")]
        public long DirectionFromTrue { get; set; }

        [JsonProperty("knots")]
        public long Knots { get; set; }

        [JsonProperty("celsius")]
        public long Celsius { get; set; }

        [JsonProperty("altitude")]
        public long Altitude { get; set; }

        [JsonProperty("isLightAndVariable")]
        public bool IsLightAndVariable { get; set; }

        [JsonProperty("isGreaterThan199Knots")]
        public bool IsGreaterThan199Knots { get; set; }

        [JsonProperty("turbulence")]
        public bool Turbulence { get; set; }

        [JsonProperty("icing")]
        public bool Icing { get; set; }
    }

    public partial class WeatherReport
    {
        public static WeatherReport FromJson(string json) => JsonConvert.DeserializeObject<WeatherReport>(json, WeatherRep.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WeatherReport self) => JsonConvert.SerializeObject(self, WeatherRep.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
